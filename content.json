{"pages":[],"posts":[{"title":"hy123","text":"新今年春节撒v六级考试女生恐惧可见当年基础上的就从哪里开始计划的vu啊","link":"/2020/03/27/hy123/"},{"title":"NProgress.js之进度条插件","text":"NProgress.js 说明: NProgress是基于jquery的，且版本要 &gt;1.8 下载地址: https://github.com/rstacruz/nprogress API: NProgress.start() — 启动进度条 NProgress.set(0.4) — 将进度设置到具体的百分比位置 NProgress.inc() — 少量增加进度 NProgress.done() — 将进度条标为完成状态 使用步骤: 1. 引入 在你的要用的界面上引入js和css文件 //还有jquery要之前引入进来 12&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/NProgress.css\" rel=\"external nofollow\" &gt; &lt;script src=\"js/NProgress.js\" type=\"text/javascript\"&gt;&lt;/script&gt;&lt;br&gt; 进度条样式修改点滴下载好的NProgress包，找到NProgress.css文件中的123456789101112 #nprogress .bar { //进度条颜色 background: greenyellow; position: fixed; z-index: 10000; top: 0; left: 0; width: 100%; height: 2px;} 3. 使用场景一:页面加载的效果 开始页面加载开始进度条 页面加载好 结束进度条: 12345678&lt;em id=\"__mceDel\"&gt;&lt;script&gt;$(function() { NProgress.start(); $(window).load(function() { NProgress.done(); });&lt;/script&gt;&lt;/em&gt; 4.使用场景二:ajax发送的效果 开始发送开始进度条 成功后 结束进度条: 有相关配置：新建一个js文件输入以下代码，引入到html文件中 12345678910111213&lt;script&gt;// 是否显示右上角加载圈圈NProgress.configure({ showSpinner: false });$(window).ajaxStart(function () { /*只要使用的ajax就会执行这个方法*/ /*开启进度条*/ NProgress.start();});$(window).ajaxComplete(function () { /*结束进度条*/ NProgress.done();});&lt;/script&gt; 其他参数配置minimum 设置开始时最低百分比，默认是0.08。12NProgress.configure({ minimum: 0.1 });template 改变进度条的HTML结构。为了保证进度条正常工作，需要一个包含role=&apos;bar&apos; 属性的元素。123NProgress.configure({ template: \"&lt;div class='....'&gt;...&lt;/div&gt;\"}); ease和speed ease可传递CSS3缓冲动画字符串（如ease、linear、ease-in、ease-out、ease-in-out、cubic-bezier）。speed为动画速度（默认200，单位ms）。12NProgress.configure({ easing: 'ease', speed: 500 }); trickle 是否显示进度条，默认：true12NProgress.configure({ trickle: false }); trickleSpeed 设置每次进度条步进速度（ms）。12NProgress.configure({ trickleSpeed: 200 }); showSpinner 是否显示环形进度动画，默认true。1NProgress.configure({ showSpinner: false }); parent 指定改变的父容器，默认body。1NProgress.configure({ parent: '#container' }); //技巧总结 此方法挂在window上 是为了监听项目中所有的ajax请求//ajax事件 可参考 jquery 文档 http://jquery.cuishifeng.cn/","link":"/2020/03/27/nprogress.js%E8%BF%9B%E5%BA%A6%E6%9D%A1/"},{"title":"表格分页插件Bootstrap Paginator的使用动态渲染html","text":"Bootstrap Paginator 说明: Bootstrap Paginator是基于Bootstrap 所开发的 下载地址: https://github.com/lyonlai/bootstrap-paginator 更多配置可以参考官方文档 下面是基于artTemplate界面排版插件，以及jquery所写的案例，包含有后台数据，前端页面动态渲染 html部分记得引入相关插件bootstrap-paginator，bootstrap，jquery,artTemplate 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!--内容--&gt;&lt;section class=\"ad_section\"&gt; &lt;!--顶部导航--&gt; &lt;nav class=\"ad_nav\"&gt; &lt;a data-menu href=\"javascript:;\"&gt;&lt;span class=\"glyphicon glyphicon-align-justify\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;a data-logout href=\"javascript:;\"&gt;&lt;span class=\"glyphicon glyphicon-log-out\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;/nav&gt; &lt;div class=\"container-fluid\"&gt; &lt;!--路径导航--&gt; &lt;ol class=\"breadcrumb\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;管理系统&lt;/a&gt;&lt;/li&gt; &lt;li class=\"active\"&gt;分类管理&lt;/li&gt; &lt;li class=\"active\"&gt;二级分类&lt;/li&gt; &lt;/ol&gt; &lt;div class=\"ad_content\"&gt; &lt;button data-toggle=\"modal\" data-target=\"#save\" class=\"btn btn-default mb_15\"&gt;添加分类&lt;/button&gt; &lt;table class=\"table table-bordered\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;一级分类名称&lt;/th&gt; &lt;th&gt;二级分类名称（品牌）&lt;/th&gt; &lt;th&gt;品牌logo&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;nav class=\"text-right\"&gt; &lt;ul class=\"pagination\"&gt; &lt;!--TODO--&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/div&gt; &lt;/div&gt;&lt;/section&gt;&lt;script type=\"text/template\" id=\"list\"&gt; &lt;% var $ = getJquery(); %&gt; &lt;% $.each(rows,function(i,item){ %&gt; &lt;tr&gt; &lt;th scope=\"row\"&gt;&lt;%=i+1+(page-1)*size%&gt;&lt;/th&gt; &lt;td&gt;&lt;%=item.categoryName%&gt;&lt;/td&gt; &lt;td&gt;&lt;%=item.brandName%&gt;&lt;/td&gt; &lt;td&gt;&lt;img width=\"40\" height=\"40\" src=\"&lt;%=item.brandLogo%&gt;\" alt=\"\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;% }); %&gt;&lt;/script&gt; js配置部分 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859$(function () { window.page = 1; /*模板无法访问外部变量的解决方案*/ /*var getJquery = function () { return jQuery; }*/ /*辅助方法：在模板内部可以使用的函数*/ template.helper('getJquery',function () { return jQuery; }); /*1.默认第一页展示*/ var render = function () { getCateSecondData(function (data) { /*模板渲染*/ $('tbody').html(template('list',data)); /*初始化分页组件 根据数据*/ /*2.分页展示*/ $('.pagination').bootstrapPaginator({ /*对应的bootstrap版本*/ bootstrapMajorVersion:3, /*分页按钮的大小*/ size:'small', /*当前页码*/ currentPage:data.page, /*一共多少页*/ totalPages:Math.ceil(data.total/data.size), /*页码按钮的数量 默认是5*/ numberOfPages:3, /*点击页码渲染*/ /*监听按钮的点击事件 获取点击的时候的页码*/ onPageClicked:function (event, originalEvent, type,page) { /*1. event jquery的事件對象*/ /*2. originalEvent 原生dom的事件對象*/ /*3. type 按鈕的類型 */ /*4. 按鈕對應的頁碼*/ //console.log(page); window.page = page; render(); } }); }); } render(); var getCateSecondData = function (callback) { $.ajax({ type:'get', url:'/category/querySecondCategoryPaging',/*后台数据对应的api*/ data:{ page: window.page || 1, pageSize:2 }, dataType:'json', success:function (data) { callback &amp;&amp; callback(data); } });}; 成品图展示","link":"/2020/03/28/Bootstrap%E8%A1%A8%E6%A0%BC%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","link":"/2020/04/02/hello-world/"},{"title":"数据验证插件bootstrapValidator 教程","text":"bootstrapValidator 说明: Bootstrap Paginator是基于jquery，Bootstrap 所开发的 下载地址: https://github.com/nghuuphuoc/bootstrapvalidator/archive/v0.4.5.zip 在线连接调用： https://www.bootcdn.cn/bootstrap-validator/ 更多配置可以参考官方文档 http://bootstrapvalidator.votintsev.ru/getting-started/ 查看文档 简单案例 一.首先引入BootstrapValidator插件BootstrapValidator插件需要jQuery和Bootstrap 3引入js和css文件 123456789&lt;link rel=\"stylesheet\" href=\"/path/to/bootstrap/css/bootstrap.css\"/&gt;&lt;link rel=\"stylesheet\" href=\"/path/to/dist/css/bootstrapValidator.min.css\"/&gt;&lt;script type=\"text/javascript\" src=\"/path/to/jquery/jquery-1.10.2.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"/path/to/bootstrap/js/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;!-- 使用压缩过的版本--&gt;&lt;script type=\"text/javascript\" src=\"/path/to/dist/js/bootstrapValidator.min.js\"&gt;&lt;/script&gt;&lt;!-- 使用包含所有验证器的未压缩版本 --&gt;&lt;script type=\"text/javascript\" src=\"/path/to/dist/js/bootstrapValidator.js\"&gt;&lt;/script&gt; 二.添加验证规则1.使用HTML添加简单验证如果想对某一个字段添加验证规则，需要包裹，input标签必须有name值，此值为验证匹配的字段。其实就是要符合bootstrap表单结构 123456&lt;div class=\"form-group\"&gt; &lt;label for=\"exampleInputEmail1\"&gt;Email address&lt;/label&gt; &lt;input type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Email\" data-bv-notempty=\"true\" data-bv-notempty-message=\"不能为空\"&gt; &lt;/div&gt; 初始化bootstrapValidator，submitHandler 属性后面会介绍到 12345678910111213$('#AppForm').bootstrapValidator({ submitHandler: function (validator, form, submitButton) { // validator: 表单验证实例对象 // form jq对象 指定表单对象 // submitButton jq对象 指定提交按钮的对象 var tourl=\"{:U('Admin/User/userSet')}\"; var data=$('#AppForm').serialize(); var id = $('input[name=id]').val(); // 使用ajax发送表达数据 $.App.ajax('post',tourl,data,null); return false; }}) 使用data-bv-notempty 和 data-bv-notempty-message属性就可以简单进行非空验证。data-bv-notempty 有值就进行非空验证，data-bv-notempty-message 中的值为提示消息 2.使用js添加验证简述 bootstrapValidator 使用方法。想查看更多可以访问http://bootstrapvalidator.votintsev.ru/getting-started/ 查看文档 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364$('form').bootstrapValidator({ // 默认的提示消息 message: 'This value is not valid', // 表单框里右侧的icon feedbackIcons: { valid: 'glyphicon glyphicon-ok', invalid: 'glyphicon glyphicon-remove', validating: 'glyphicon glyphicon-refresh' }, submitHandler: function (validator, form, submitButton) { // 表单提交成功时会调用此方法 // validator: 表单验证实例对象 // form jq对象 指定表单对象 // submitButton jq对象 指定提交按钮的对象 }, fields: { username: { message: '用户名验证失败', validators: { notEmpty: { message: '用户名不能为空' }, stringLength: { //长度限制 min: 6, max: 18, message: '用户名长度必须在6到18位之间' }, regexp: { //正则表达式 regexp: /^[a-zA-Z0-9_]+$/, message: '用户名只能包含大写、小写、数字和下划线' }, different: { //比较 field: 'username', //需要进行比较的input name值 message: '密码不能与用户名相同' }, identical: { //比较是否相同 field: 'password', //需要进行比较的input name值 message: '两次密码不一致' }, remote: { // ajax校验，获得一个json数据（{'valid': true or false}） url: 'user.php', //验证地址 message: '用户已存在', //提示信息 type: 'POST', //请求方式 data: function(validator){ //自定义提交数据，默认为当前input name值 return { act: 'is_registered', username: $(\"input[name='username']\").val() }; } } } }, email: { validators: { notEmpty: { message: '邮箱地址不能为空' }, emailAddress: { message: '邮箱地址格式有误' } } } } }); 可以看到，validators属性对应一个Json对象，里面可以包含多个验证的类型。我在 username 的 validators 里添加了很多属性，这些都是一些常用的属性方法，按需添加。 我自定义的正则校验，⚠️与上面代码不是对应的，大家自己根据自己需求写正则上面代码中 emailAddress 是邮箱地址验证，都不用我们去写邮箱的正则了。除此之外还有46个其他的验证类型，大家自己去看文档。再贴几个常见的。 between: 验证输入值必须在某一个范围值内，比如大于1小于10creditCard: 身份证验证date: 日期验证ip: IP地址验证numeric: 数值验证phone: 电话号码验证url验证 文章参考链接：https://www.jianshu.com/p/756b225d480d","link":"/2020/03/29/%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E6%8F%92%E4%BB%B6/"}],"tags":[{"name":"li","slug":"li","link":"/tags/li/"},{"name":"进度条插件","slug":"进度条插件","link":"/tags/%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%8F%92%E4%BB%B6/"},{"name":"表格分页条插件","slug":"表格分页条插件","link":"/tags/%E8%A1%A8%E6%A0%BC%E5%88%86%E9%A1%B5%E6%9D%A1%E6%8F%92%E4%BB%B6/"},{"name":"数据验证","slug":"数据验证","link":"/tags/%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/"}],"categories":[{"name":"web前端","slug":"web前端","link":"/categories/web%E5%89%8D%E7%AB%AF/"}]}